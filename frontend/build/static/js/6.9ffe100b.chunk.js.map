{"version":3,"sources":["component/Add_Job/addJob.js","action/action.js","config/config.js"],"names":["AddJob","props","handleSubmit","e","a","preventDefault","dispatch","addJob","addJobForm","value","history","loading","className","FormBuilder","group","jobTitle","Validators","required","jobLocation","jobDescription","date","status","style","marginLeft","cursor","control","this","render","get","invalid","onSubmit","name","handler","touched","hasError","for","type","color","id","disabled","to","Component","connect","state","ownProps","getPostDetails","post","getJobList","data","GET_POST_LIST","Payload","getPostListing","axios","url","then","res","toastr","error","msg","catch","err","success","push","pathname","editJobPost","deleteJobList","getJobDataToUpdate","module","exports"],"mappings":"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","file":"static/js/6.9ffe100b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport {\r\n    FormBuilder,\r\n    FieldGroup,\r\n    FieldControl,\r\n    Validators\r\n} from \"react-reactive-form\";\r\nimport {\r\n    addJob\r\n} from \"../../action/action\";\r\nclass AddJob extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.addJobForm = FormBuilder.group({\r\n            jobTitle: [\"\", [Validators.required]],\r\n            jobLocation: [\"\", [Validators.required]],\r\n            jobDescription: [\"\", [Validators.required]],\r\n            date: [\"\", [Validators.required]],\r\n            status: [\"\", [Validators.required]],\r\n        });\r\n    }\r\n\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        await this.props.dispatch(\r\n            addJob(this.addJobForm.value, this.props.history)\r\n        );\r\n    }\r\n\r\n    loading = () => (\r\n        <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>\r\n    );\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h2> Add Job<span style={{ marginLeft: \"60%\", cursor: \"pointer\" }}></span></h2>\r\n                </div>\r\n                <FieldGroup\r\n                    control={this.addJobForm}\r\n                    render={({ get, invalid }) => (\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <div className=\"row\">\r\n                                <FieldControl\r\n                                    name=\"jobTitle\"\r\n                                    render={({ handler, touched, hasError }) => (\r\n                                        <div className=\"col-md-12 form-group\">\r\n                                            <label for=\"\">Job Title</label>\r\n                                            <input\r\n                                                className=\"form-control rounded-0 border-top-0 border-right-0 border-left-0 px-0\"\r\n                                                type=\"text\"\r\n                                                {...handler()}\r\n                                            />\r\n                                            <span className=\"pro-error\" style={{ color: \"red\" }}>\r\n                                                {touched &&\r\n                                                    ((hasError(\"required\") && `Job title is required`))}\r\n                                            </span>\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                                <FieldControl\r\n                                    name=\"jobLocation\"\r\n                                    render={({ handler, touched, hasError }) => (\r\n                                        <div className=\"col-md-12 form-group\">\r\n                                            <label for=\"\">Job Location</label>\r\n                                            <input\r\n                                                className=\"form-control rounded-0 border-top-0 border-right-0 border-left-0 px-0\"\r\n                                                type=\"text\"\r\n                                                {...handler()}\r\n                                            />\r\n                                            <span className=\"pro-error\" style={{ color: \"red\" }}>\r\n                                                {touched &&\r\n                                                    ((hasError(\"required\") && `Job location is required`))}\r\n                                            </span>\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                                <FieldControl\r\n                                    name=\"jobDescription\"\r\n                                    render={({ handler, touched, hasError }) => (\r\n                                        <div className=\"col-md-12 form-group\">\r\n                                            <label for=\"\">Job Description</label>\r\n                                            <textarea className=\"form-control rounded-0 border-top-0 border-right-0 border-left-0 px-0\"\r\n                                                {...handler()}></textarea>\r\n                                            <span className=\"pro-error\" style={{ color: \"red\" }}>\r\n                                                {touched &&\r\n                                                    ((hasError(\"required\") && `Job description is required`))}\r\n                                            </span>\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                                <FieldControl\r\n                                    name=\"date\"\r\n                                    render={({ handler, touched, hasError }) => (\r\n                                        <div className=\"col-md-12 form-group\">\r\n                                            <label for=\"\">Date</label>\r\n                                            <input\r\n                                                className=\"form-control rounded-0 border-top-0 border-right-0 border-left-0 px-0\"\r\n                                                type=\"date\"\r\n                                                {...handler()}\r\n                                            />\r\n                                            <span className=\"pro-error\" style={{ color: \"red\" }}>\r\n                                                {touched &&\r\n                                                    ((hasError(\"required\") && `Date is required`))}\r\n                                            </span>\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                                <FieldControl\r\n                                    name=\"status\"\r\n                                    render={({ handler, touched, hasError }) => (\r\n                                        <div className=\"col-md-12 form-group\">\r\n                                            <label for=\"\">Job Status</label>\r\n                                            <select\r\n                                                className=\"form-control rounded-0 border-top-0 border-right-0 border-left-0 px-0\"\r\n                                                id=\"exampleFormControlSelect1\"\r\n                                                {...handler()}\r\n                                            >\r\n                                                <option value=\"\">Select an option</option>\r\n                                                <option value=\"Traniee\">Traniee</option>\r\n                                                <option value=\"Associate\">Associate</option>\r\n                                                <option value=\"Senior Associate\">Senior Associate</option>\r\n                                                <option value=\"Manager Level 1\">Manager Level 1</option>\r\n                                                <option value=\"Senior Manager\">Senior Manager</option>\r\n                                            </select>\r\n                                            <span className=\"pro-error\" style={{ color: \"red\" }}>\r\n                                                {touched &&\r\n                                                    ((hasError(\"required\") && `Status is required`))}\r\n                                            </span>\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                                <div className=\"col-md-6\">\r\n                                    <button\r\n                                        type=\"submit\"\r\n                                        className=\"btn btn-success text-center\"\r\n                                        disabled={invalid}\r\n                                    >\r\n                                        Submit\r\n                             </button>\r\n                                </div>\r\n                                <div className=\"col-md-6\">\r\n                                    <NavLink to=\"/\">\r\n                                        <button\r\n                                            type=\"button\"\r\n                                            className=\"btn btn-primary float-right\"\r\n                                        >\r\n                                            Back\r\n                             </button>\r\n                                    </NavLink>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    )}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n    return {\r\n        getPostDetails: state.post.getPostDetails,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(AddJob)\r\n","import axios from \"axios\";\r\nimport toastr from \"toastr\";\r\nimport {\r\n    GET_POST_LIST\r\n} from \"./action_constant/action_constant\";\r\nimport \"../../node_modules/toastr/build/toastr.css\";\r\nimport url from \"../config/config\";\r\n\r\nexport function getJobList(data) {\r\n    return {\r\n        type: GET_POST_LIST,\r\n        Payload: data\r\n    };\r\n}\r\n\r\nexport function getPostListing() {\r\n    return function (dispatch) {\r\n        return axios\r\n            .post(url + \"/post/getPostList\")\r\n            .then(res => {\r\n                if (res.data.status === 200) {\r\n                    dispatch(getJobList(res.data.data));\r\n                } else {\r\n                    toastr.error(res.data.msg);\r\n                    return false\r\n                }\r\n            })\r\n            .catch(err => {\r\n                toastr.error(\"Something went wrong, Please try again\");\r\n            });\r\n    }\r\n}\r\n\r\nexport function addJob(data, history) {\r\n    return function (dispatch) {\r\n        return axios\r\n            .post(url + \"/post/addJobPost\", { data })\r\n            .then(res => {\r\n                if (res.data.status === 200) {\r\n                    toastr.success(res.data.msg);\r\n                    history.push({ pathname: \"/\" });\r\n                } else {\r\n                    toastr.error(res.data.msg);\r\n                    return false\r\n                }\r\n            })\r\n            .catch(err => {\r\n                toastr.error(\"Something went wrong, Please try again\");\r\n            });\r\n    }\r\n}\r\n\r\nexport function editJobPost(data, history) {\r\n    return function (dispatch) {\r\n        return axios\r\n            .post(url + \"/post/updateJobData\", { data })\r\n            .then(res => {\r\n                if (res.data.status === 200) {\r\n                    toastr.success(res.data.msg);\r\n                    history.push({ pathname: \"/\" });\r\n                } else {\r\n                    toastr.error(res.data.msg);\r\n                    return false\r\n                }\r\n            })\r\n            .catch(err => {\r\n                toastr.error(\"Something went wrong, Please try again\");\r\n            });\r\n    }\r\n}\r\n\r\nexport function deleteJobList(data, history) {\r\n    return function (dispatch) {\r\n        return axios\r\n            .post(url + \"/post/deleteJobData\", { data })\r\n            .then(res => {\r\n                if (res.data.status === 200) {\r\n                    toastr.success(res.data.msg);\r\n                    dispatch(getJobList(res.data.data));\r\n                    return true\r\n                } else {\r\n                    toastr.error(res.data.msg);\r\n                    return false\r\n                }\r\n            })\r\n            .catch(err => {\r\n                toastr.error(\"Something went wrong, Please try again\");\r\n            });\r\n    }\r\n}\r\n\r\nexport function getJobDataToUpdate(data, history) {\r\n    return function (dispatch) {\r\n        return axios\r\n            .post(url + \"/post/getJobDataToUpdate\", { data })\r\n            .then(res => {\r\n                if (res.data.status === 200) {\r\n                    return res.data.data;\r\n                } else {\r\n                    toastr.error(res.data.msg);\r\n                    return false\r\n                }\r\n            })\r\n            .catch(err => {\r\n                toastr.error(\"Something went wrong, Please try again\");\r\n            });\r\n    }\r\n}\r\n","module.exports = \"http://localhost:3586\";\r\n\r\n"],"sourceRoot":""}